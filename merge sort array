///to get the perfect output your input needs to be sorted in ascending order

#include <stdio.h>

void merge(int [], int, int [], int, int []);

int main()
{
    int a[100], b[100], m, n, c, sorted[200];

    printf("Input number of elements in first array\n");
    scanf("%d", &m);

    printf("Input %d integers\n", m);
    for (c = 0; c < m; c++)
    {
        scanf("%d", &a[c]);             ///first array of inputs
    }

    printf("Input number of elements in second array\n");
    scanf("%d", &n);

    printf("Input %d integers\n", n);
    for (c = 0; c < n; c++)
    {
        scanf("%d", &b[c]);                ///second array of inputs
    }

    merge(a, m, b, n, sorted);              ///this is where merge sort function is called

    printf("Sorted array:\n");

    for (c = 0; c < m + n; c++)
    {
        printf("%d\n", sorted[c]);          ///after the function completes its function this is where it prints the values of those two array merged
    }

  return 0;
}

void merge(int a[], int m, int b[], int n, int sorted[])            ///void merge actually means that the return value is null
{
    int i, j, k;

    j = k = 0;

    for (i = 0; i < m + n;)                       ///loop started where the loop will continue until 'i' is less than the sum of the number of array elements
    {
        if (j < m && k < n)
        {
            if (a[j] < b[k])                  ///if a[j] is greater than b[k] meaning where the same positional value of array 'a' is greater than same positional value of 'b' array
            {
                sorted[i] = a[j];           ///here sorted array will be getting the value of array 'a'
                j++;                       /// to select the next value of array the increment 'j' is added
            }
            else                          ///if a[j] is less than b[k] meaning where the same positional value of array 'a' is less than same positional value of 'b' array
            {
                sorted[i] = b[k];
                k++;                        ///increment of 'k'
            }
            i++;                        ///increment of 'i' so that sorted array can intake value in the next position of array
        }
        else if (j == m)               ///if the the value of 'j' equals to the value of 'm' 
        {
            for (; i < m + n;)
            {
                sorted[i] = b[k];     /// with the same loop limit the sorted array will take the value of array 'b' with increment of both 'k' and 'i'
                k++;
                i++;
            }
        }
        else                         //if none of the conditions above is true then sorted array will take the value of array 'a' with the increment of both 'j' and 'i' 
        {
            for (; i < m + n;)
            {
                sorted[i] = a[j];
                j++;
                i++;
            }
        }
    }
}
